# @package _global_
defaults:
  - /pipeline: genomic_benchmark
  - override /scheduler: cosine_warmup_timm

# model:
#   _name_: dna_embedding
#   d_model: 128
#   n_layer: 2
#   d_inner: ${eval:4 * ${.d_model}}
#   vocab_size: 12
#   resid_dropout: 0.0
#   embed_dropout: 0.1
#   fused_mlp: False # figure out how to use fused MLP, maybe only with bf16 + a100
#   fused_dropout_add_ln: True
#   residual_in_fp32: True
#   pad_vocab_size_multiple: 8
#   attn_layer_idx: [0,1,2,3,4,5,6,7,8,9,10,11]  # if passing these attn flags, then MHA auto used
#   attn_cfg:
#     num_heads: 8
#     use_flash_attn: True  # figure out how to use
#     fused_bias_fc: False  # this doesn't work for some reason, loss not going down
#     dropout: 0.1
#     rotary_emb_dim: 16 
#   layer:
#     _name_: hyena
#     emb_dim: 5
#     filter_order: 64
#     short_filter_order: 3
#     l_max: 515  # required to be set the same as the pretrained model if using, don't forget the +2!  ${eval:${dataset.max_length}+2}
#     modulate: True
#     w: 10
#     lr: ${optimizer.lr}
#     wd: 0.0
#     lr_pos_emb: 0.0
model:
  _name_: denoise_cnn
  for_representation: true
  alphabet_size: 5
  num_cls: 0
  d_model: 512
  length: ${dataset.max_length}
  kernel_size: 5
  dilation: 4
  out_dim: 2
  use_outlinear: False
  mlp: True
  pretrain: False
  forget: True
  num_conv1d: 5
  d_inner: 4
  final_conv: true
  args:
    clean_data: false
    hidden_dim: 512
    cls_expanded_simplex: true
    mode: dirichlet
    num_cnn_stacks: 4
    dropout: 0.0
    cls_free_guidance: false
    alpha_max: 8
    fix_alpha: 1e6
    alpha_scale: 2
    prior_pseudocount: 2
    seed: ${train.seed}

# model:
#   _name_: caduceus
#   mode: ps
#   size: 1.9

task:
  # 2 options for soft_cross_entropy (for mixup)
  loss:
    # soft_cross_entropy for pytorch 1.10+, which takes in label_smoothing here
    _name_: cross_entropy
    # label_smoothing: 0.1
  # pass in list of k's
  # last_k_ppl: null

trainer:
  accelerator: gpu
  devices: 2
  num_nodes: 1
  accumulate_grad_batches: ${div_up:${train.global_batch_size}, ${eval:${trainer.devices} * ${dataset.batch_size} * ${trainer.num_nodes}}}
  max_epochs: 10
  precision: 32  # bf16 only a100
  gradient_clip_val: 1.0
  # strategy: null

# there are 8 datasets in this suite, choose 1 at a time, with their corresponding settings
# name                                num_seqs        num_classes     median len    std
# dummy_mouse_enhancers_ensembl       1210            2               2381          984.4  
# demo_coding_vs_intergenomic_seqs    100_000         2               200           0
# demo_human_or_worm                  100_000         2               200           0
# human_enhancers_cohn                27791           2               500           0
# human_enhancers_ensembl             154842          2               269           122.6
# human_ensembl_regulatory            289061          3               401           184.3
# human_nontata_promoters             36131           2               251           0
# human_ocr_ensembl                   174756          2               315           108.1

# decoder: null

dataset:
  # batch_size: 32  # Per GPU
  batch_size: 16
  max_length: 2500 # select max that you want for this dataset
  # dataset_name: 'human_nontata_promoters'
  dataset_name: 'dummy_mouse_enhancers_ensembl'
  dest_path: '/mnt/nas/share2/home/by/hyena-dna/data/genomic_benchmark/'
  d_output: 2  # binary classification by default
  use_padding: True
  padding_side: 'left'
  add_eos: False
  train_len: 1210  # update this according to above table
  __l_max: ${.max_length}
  tokenizer_name: char
  use_tokenizer: False
  # rc_aug: true  # reverse complement augmentation.  Didn't seem to help for human_nontata_promoters, but could be wrong

scheduler:
  t_in_epochs: False
  t_initial: ${eval:${div_up:${dataset.train_len}, ${train.global_batch_size}} * ${trainer.max_epochs}}
  warmup_lr_init: 1e-6
  warmup_t: ${eval:${div_up:${dataset.train_len}, ${train.global_batch_size}} * ${trainer.max_epochs} * 0.01}
  lr_min: ${eval:0.1 * ${optimizer.lr}}

optimizer:
  lr: 1e-3
  weight_decay: 0.1

train:
  gpu_mem: ${eval:"round(float(__import__('subprocess').check_output('nvidia-smi -i 0 --query-gpu=memory.total --format=csv,noheader,nounits', shell=True).strip().decode()) / 1000)"}
  seed: 2222
  global_batch_size: 128
  remove_test_loader_in_eval: true  # no test set in this benchmark
  pretrained_model_strict_load: False  # false allows encoder/decoder to be used if new model uses it
  # for loading backbone and not head, requires both of these flags below
  # pretrained_model_path: /mnt/nas/share2/home/by/hyena-dna/results_ckpt/hyena_gb_finetuned/accuracy.ckpt
  # cnn 记住位置了
  # pretrained_model_path: /mnt/nas/share2/home/by/hyena-dna/outputs/2024-05-12/15-43-22-627198/checkpoints/test/loss.ckpt
  pretrained_model_path: null
  pretrained_model_state_hook:
    _name_: load_backbone
    freeze_backbone: false  # seems to work much better if false (ie finetune entire model)
